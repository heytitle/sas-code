/* DATA MYDATA; */
/* 	INPUT ID Y; */
/* 	DATALINES; */
/* 1 102 */
/* 2 104 */
/* 3 101 */
/* 4 97 */
/* 5 95 */
/* 6 106 */
/* 7 103 */
/* 8 98 */
/* 9 96 */
/* 10 99 */
/* RUN; */

DATA MYDATA; 
   INPUT ID Y; 
   DATALINES;
1 104.3
2 132.4
3 112.4
4 100.7
5 105.3
6 99.0
7 109.4
8 101.9
9 100.5
10 110.5
11 112.5
12 98.8
13 97.0
14 114.8
15 110.7
16 114.0
17 98.9
18 112.1
19 100.6
20 119.3
; 
RUN;


TITLE "CHECK TIES";
PROC SQL ;
	CREATE TABLE TIES AS
	SELECT Y, COUNT(Y) AS TIES FROM MYDATA GROUP BY Y;
RUN;

PROC PRINT DATA=TIES;
	VAR Y TIES;
RUN;


TITLE "GENERAL STATS";

PROC UNIVARIATE DATA=MYDATA NORMAL;
	VAR Y;
	OUTPUT OUT=MYDATA_STATS MEDIAN=MEDIAN N=N MEAN=MEAN;
RUN;

PROC SQL ;
	CREATE TABLE MYDATA AS
	SELECT * FROM MYDATA, MYDATA_STATS;
RUN;

PROC RANK
	DATA=MYDATA OUT=MYDATA;
	VAR Y;
	RANKS R;
RUN;

DATA MYDATA;
	SET MYDATA;
	PREV_Y = LAG(Y);
	
	C_2_SIDED  = QUANTILE('NORMAL',1-0.05/2 );
	C_1_SIDED  = QUANTILE('NORMAL',1-0.05/1 );
	
	/* Conditional run tests */
	IF( Y < MEDIAN ) THEN
		CON_RUN = 0;
	ELSE 
		CON_RUN = 1;
		
	IF( CON_RUN = LAG1(CON_RUN) ) THEN
		COUNT_CON_RUN = 0;
	ELSE
		COUNT_CON_RUN = 1;
		
	IF( CON_RUN = 0 ) THEN
		CON_COUNT_ZERO = 1;
	ELSE
		CON_COUNT_ONE = 1;
	
	/* Unconditional run tests */
	IF( PREV_Y < Y ) THEN
		UNCON_RUN = 1;
	ELSE
		UNCON_RUN = 0;
		
	IF( UNCON_RUN = LAG1(UNCON_RUN) ) THEN
		COUNT_UNCON_RUN = 0;
	ELSE
		COUNT_UNCON_RUN = 1;
		
	/* 	Serial Rank Autocorrelation */
	R1 = LAG1(R);
	AVG_RANK = (N+1)/2;
	Z = R - AVG_RANK;
	Z1 = R1 - AVG_RANK;
	COV = Z*Z1;
	
/* 	Normal autocorreation */
	Y1 = LAG1(Y);
	X = Y - MEAN;
	X1 = Y1 - MEAN;
	COVZ = X*X1;

RUN;


TITLE "CONDITION RUN TEST";
PROC SQL;
	CREATE TABLE CONDITION_RUNS AS
		SELECT  SUM(COUNT_CON_RUN) AS CONDITION_RUN, SUM(CON_COUNT_ZERO) AS N0, SUM(CON_COUNT_ONE) AS N1
		FROM MYDATA ;
RUN;

DATA CONDITION_TEST;
	SET CONDITION_RUNS;
	SET MYDATA;
	MEAN_R = 1  + 2*N0*N1/(N0+N1);
	VAR_R  = 2*N0*N1*(N0*N1-N0-N1)/( ((N0+N1)**2)*(N0+N1-1));
	TEST = ABS(CONDITION_RUN - MEAN_R ) / SQRT(VAR_R) ;
	ABS_TEST = ABS(TEST);

RUN;

PROC PRINT DATA=CONDITION_TEST;
	VAR CONDITION_RUN MEAN_R VAR_R TEST ABS_TEST C_1_SIDED C_2_SIDED;
RUN;


TITLE "UNCONDITION RUN TEST";
PROC SQL;
	CREATE TABLE UNCONDITION_RUNS AS
		SELECT  SUM(COUNT_UNCON_RUN) AS UNCONDITION_RUN
		FROM MYDATA ;
RUN;

DATA UNCONDITION_TEST;
	SET UNCONDITION_RUNS;
	SET MYDATA;
	MEAN_R = ( 2*N - 1 )/ 3;
	VAR_R  = ( 16*N -29 ) / 90;
	TEST = (UNCONDITION_RUN - MEAN_R ) / SQRT(VAR_R) ;
	ABS_TEST = ABS(TEST);
RUN;

PROC PRINT DATA=UNCONDITION_TEST;
	VAR UNCONDITION_RUN MEAN_R VAR_R TEST ABS_TEST C_1_SIDED C_2_SIDED;
RUN;

TITLE "RANK SERIAL AUTOCORRELATION";

PROC SQL ;
	CREATE TABLE RANK_SERIAL AS
	SELECT SUM(COV) AS SUM_COV, CSS(R) AS CSS FROM MYDATA;
RUN;

DATA RANK_SERIAL;
	SET RANK_SERIAL;
	SET MYDATA;
	ETA = SUM_COV/CSS;
	MEAN_ETA = -1/N;
	VAR_ETA = ( 5*N**4 -24*N**3 +29*N**2 +54*N-16 )/ ((5*N**2)*(N-1)**3);
	
	TEST = ( ETA - MEAN_ETA ) / SQRT( VAR_ETA ) ;
	
	ABS_TEST = ABS(TEST);

RUN;

PROC PRINT DATA=RANK_SERIAL;
	VAR ETA MEAN_ETA VAR_ETA TEST ABS_TEST C_1_SIDED C_2_SIDED;
RUN;




TITLE "NORMAL AUTOCORRELATION";
PROC SQL ;
	CREATE TABLE NORMAL_AUTO AS
	SELECT SUM(COVZ) AS SUM_COV, CSS(Y) AS CSS FROM MYDATA;
RUN;

DATA NORMAL_AUTO;
	SET NORMAL_AUTO;
	SET MYDATA;
	R = SUM_COV/CSS;
	MEAN_R = -1/N;
	VAR_R = ((N-2)**2)/(N**2*(N-1));
	
	TEST = ( R - MEAN_R ) / SQRT( VAR_R ) ;
	ABS_TEST = ABS(TEST);	
	
RUN;

PROC PRINT DATA=NORMAL_AUTO;
	VAR R MEAN_R VAR_R TEST ABS_TEST C_1_SIDED C_2_SIDED;
RUN;